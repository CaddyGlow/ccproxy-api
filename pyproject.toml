[project]
name = "claude-code-proxy-api"
# version = "0.1.0"
dynamic = ["version"]
description = "API server that provides an Anthropic and OpenAI compatible interface over Claude Code, allowing to use your Claude OAuth account or over the API."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "anthropic>=0.57.1",
  "check-jsonschema>=0.33.2",
  "claude-code-sdk>=0.0.14", # Using GitHub version with PR #60 fix
  "fastapi[standard]>=0.115.14",
  "httpx>=0.28.1",
  "openai>=1.93.0",
  "pydantic>=2.8.0",
  "pydantic-settings>=2.4.0",
  "rich>=13.0.0",
  "rich-toolkit>=0.14.8",
  "tomli>=2.0.0; python_version<'3.11'",
  "typer>=0.16.0",
  "typing-extensions>=4.0.0",
  "uvicorn>=0.34.0",
]

[build-system]
# Using hatchling to used git tag for version
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
# requires = ["uv"]
# build-backend = "uv.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "claude_code_proxy/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["claude_code_proxy"]

[project.scripts]
ccproxy = "claude_code_proxy.cli:app"

[dependency-groups]
dev = [
  "mypy>=1.16.1",
  "ruff>=0.12.2",
  "pytest>=7.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.0.0",
  "pytest-env>=0.8.0",
  "tox>=4.27.0",
  "pre-commit>=4.2.0",
]
docs = [
  "mkdocs>=1.5.3",
  "mkdocs-material>=9.5.0",
  "mkdocstrings[python]>=0.24.0",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-literate-nav>=0.6.0",
  "mkdocs-section-index>=0.3.0",
  "mkdocs-swagger-ui-tag>=0.6.0",
  "mkdocs-include-markdown-plugin>=6.0.0",
  "mkdocs-mermaid2-plugin>=1.1.0",
  "mkdocs-glightbox>=0.3.0",
  "mkdocs-minify-plugin>=0.7.0",
  "mkdocs-redirects>=1.2.0",
]
schema = ["pydantic>=2.8.0", "check-jsonschema>=0.33.2"]

[tool.coverage.run]
include = ["claude_code_proxy", "tests"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "from typing import",
  "VERSION_TUPLE = Tuple",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # Pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "PTH", # flake8-use-pathlib
]

ignore = [
  "E501",   # Line too long (handled by formatter)
  "B008",   # Do not perform function calls in argument defaults
  "N806",   # Variable in function should be lowercase (for pandas df, etc)
  "SIM108", # Use ternary operator (sometimes less readable)
  "F401",   # Imported but unused
  "F841",   # Local variable assigned but never used
]

exclude = [
  ".git",
  ".venv",
  "venv",
  "__pycache__",
  "build",
  "dist",
  "*.egg-info",
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["claude_code_proxy"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
# relax on scripts and tests
"scripts/*" = ["T201"]       # check for print statements
"tests/*" = ["N802", "N803"] # arg/function name should be lowercase

[tool.mypy]
python_version = "3.12"
show_column_numbers = true
follow_imports = "normal"
exclude = ["docs/", "site/"]

# Enable all strict mode flags
strict = true
# The following settings are enabled by --strict:
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_any_unimported = true
warn_unreachable = true

# if we need to disable certain strict checks
# disallow_incomplete_defs = false
# disallow_untyped_decorators = false


[[tool.mypy.overrides]]
module = "tests.*"
# ignore_errors = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
warn_unused_ignores = false
# Ignore call-arg errors for Pydantic models with optional fields
disable_error_code = ["call-arg"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--disable-warnings",
  "--tb=short",
  "-v",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"


# Test markers for different test tiers
markers = [
  "unit: Fast unit tests that don't require external dependencies (< 1s each)",
  "integration: Integration tests that may use Docker or external services (< 30s each)",
  "slow: Slow tests that take significant time or resources (> 30s each)",
  "docker: Tests that require Docker to be available",
  "network: Tests that require network access",
  "regression: Regression tests for specific bug fixes",
  "smoke: Basic smoke tests for critical functionality",
  "asyncio: Tests that use asyncio",
]

[tool.pytest_timeout]
timeout = 300
timeout_method = "thread"

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts", "examples"]
skips = [
  "B101",
  "B601",
  "B110",
  "B113",
] # Skip assert_used, shell_injection_possible, try_except_pass, request_without_timeout

[tool.tox]
legacy_tox_ini = """
  [tox]
  envlist = py310,py311,py312,py313

  [testenv]
  deps =
      pytest
      pytest-asyncio
      pytest-cov
      pytest-timeout
      pytest-env
  commands = pytest {posargs}
  """

[tool.setuptools.packages.find]
include = ["claude_code_proxy*"]

[tool.uv]
package = true

[tool.uv.sources]
claude-code-sdk = { git = "https://github.com/anthropics/claude-code-sdk-python.git" }
